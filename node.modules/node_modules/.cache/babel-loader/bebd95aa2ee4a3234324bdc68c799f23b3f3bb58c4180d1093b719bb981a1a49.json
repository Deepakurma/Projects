{"ast":null,"code":"// import { useCallback, useReducer } from \"react\";\n\n// const formReducer = (state, action) => {\n//     switch (action.type) {\n//       case \"INPUT_CHANGE\":\n//         let formIsValid = true;\n//         for (const inputId in state.inputs) {\n//           if (inputId === action.inputId) {\n//             formIsValid = formIsValid && action.isValid;\n//           } else {\n//             formIsValid = formIsValid && state.inputs[inputId].isValid;\n//           }\n//         }\n//         return {\n//           ...state,\n//           inputs: {\n//             ...state.inputs,\n//             [action.inputId]: { value: action.value, isValid: action.isValid },\n//           },\n//           isValid: formIsValid,\n//         };\n//       case 'SET_DATA': \n//           return{\n//             inputs: action.inputs,\n//             isValid: action.formIsValid\n//           }\n//       default:\n//         return state;\n//     }\n//   };\n\n// export  const useForm = (intialInputs,initialFormValidity) => {\n//     const [formState, dispatch] = useReducer(formReducer, {\n//         inputs: intialInputs,\n//         isValid: initialFormValidity,\n//       });\n\n//       const inputHandler = useCallback((id, value, isValid) => {\n//         dispatch({\n//           type: \"INPUT_CHANGE\",\n//           value: value,\n//           isValid: isValid,\n//           inputId: id\n//         });\n//       }, []);\n\n//       const setFormdata = useCallback((inputData, formValidity) => {\n//         dispatch({\n//           type: \"SET_DATA\",\n//           inputs: inputData,\n//           formIsValid: formValidity\n//         })\n//       }, []);\n\n//       return [formState, inputHandler, setFormdata]\n// };;","map":{"version":3,"names":[],"sources":["/Users/deepakkurma/Desktop/React-mern-stack/src/shared/hooks/from-hook.js"],"sourcesContent":["// import { useCallback, useReducer } from \"react\";\n\n// const formReducer = (state, action) => {\n//     switch (action.type) {\n//       case \"INPUT_CHANGE\":\n//         let formIsValid = true;\n//         for (const inputId in state.inputs) {\n//           if (inputId === action.inputId) {\n//             formIsValid = formIsValid && action.isValid;\n//           } else {\n//             formIsValid = formIsValid && state.inputs[inputId].isValid;\n//           }\n//         }\n//         return {\n//           ...state,\n//           inputs: {\n//             ...state.inputs,\n//             [action.inputId]: { value: action.value, isValid: action.isValid },\n//           },\n//           isValid: formIsValid,\n//         };\n//       case 'SET_DATA': \n//           return{\n//             inputs: action.inputs,\n//             isValid: action.formIsValid\n//           }\n//       default:\n//         return state;\n//     }\n//   };\n\n\n// export  const useForm = (intialInputs,initialFormValidity) => {\n//     const [formState, dispatch] = useReducer(formReducer, {\n//         inputs: intialInputs,\n//         isValid: initialFormValidity,\n//       });\n\n\n//       const inputHandler = useCallback((id, value, isValid) => {\n//         dispatch({\n//           type: \"INPUT_CHANGE\",\n//           value: value,\n//           isValid: isValid,\n//           inputId: id\n//         });\n//       }, []);\n\n//       const setFormdata = useCallback((inputData, formValidity) => {\n//         dispatch({\n//           type: \"SET_DATA\",\n//           inputs: inputData,\n//           formIsValid: formValidity\n//         })\n//       }, []);\n\n//       return [formState, inputHandler, setFormdata]\n// };;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}