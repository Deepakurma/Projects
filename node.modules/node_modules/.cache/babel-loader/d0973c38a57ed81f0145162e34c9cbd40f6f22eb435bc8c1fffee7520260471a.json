{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useCallback, useReducer } from \"react\";\n\n// const formReducer = (state, action) => {\n//     switch (action.type) {\n//       case \"INPUT_CHANGE\":\n//         let formIsValid = true;\n//         for (const inputId in state.inputs) {\n//           if (inputId === action.inputId) {\n//             formIsValid = formIsValid && action.isValid;\n//           } else {\n//             formIsValid = formIsValid && state.inputs[inputId].isValid;\n//           }\n//         }\n//         return {\n//           ...state,\n//           inputs: {\n//             ...state.inputs,\n//             [action.inputId]: { value: action.value, isValid: action.isValid },\n//           },\n//           isValid: formIsValid,\n//         };\n//       case 'SET_DATA': \n//           return{\n//             inputs: action.inputs,\n//             isValid: action.formIsValid\n//           }\n//       default:\n//         return state;\n//     }\n//   };\n\n// export  const useForm = (intialInputs,initialFormValidity) => {\n//     const [formState, dispatch] = useReducer(formReducer, {\n//         inputs: intialInputs,\n//         isValid: initialFormValidity,\n//       });\n\n//       const inputHandler = useCallback((id, value, isValid) => {\n//         dispatch({\n//           type: \"INPUT_CHANGE\",\n//           value: value,\n//           isValid: isValid,\n//           inputId: id\n//         });\n//       }, []);\n\n//       const setFormdata = useCallback((inputData, formValidity) => {\n//         dispatch({\n//           type: \"SET_DATA\",\n//           inputs: inputData,\n//           formIsValid: formValidity\n//         })\n//       }, []);\n\n//       return [formState, inputHandler, setFormdata]\n// };;\n\nimport { useCallback, useReducer } from \"react\";\nexport const useForm = (initialInputs, initialFormValidity) => {\n  _s();\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n_s(useForm, \"epC4CuF7prGsftiivJhSx6iGADk=\");","map":{"version":3,"names":["useCallback","useReducer","useForm","initialInputs","initialFormValidity","_s","formState","dispatch","formReducer","inputs","isValid","inputHandler","id","value","type","inputId","setFormData","inputData","formValidity","formIsValid"],"sources":["/Users/deepakkurma/Desktop/React-mern-stack/src/shared/hooks/from-hook.js"],"sourcesContent":["// import { useCallback, useReducer } from \"react\";\n\n// const formReducer = (state, action) => {\n//     switch (action.type) {\n//       case \"INPUT_CHANGE\":\n//         let formIsValid = true;\n//         for (const inputId in state.inputs) {\n//           if (inputId === action.inputId) {\n//             formIsValid = formIsValid && action.isValid;\n//           } else {\n//             formIsValid = formIsValid && state.inputs[inputId].isValid;\n//           }\n//         }\n//         return {\n//           ...state,\n//           inputs: {\n//             ...state.inputs,\n//             [action.inputId]: { value: action.value, isValid: action.isValid },\n//           },\n//           isValid: formIsValid,\n//         };\n//       case 'SET_DATA': \n//           return{\n//             inputs: action.inputs,\n//             isValid: action.formIsValid\n//           }\n//       default:\n//         return state;\n//     }\n//   };\n\n\n// export  const useForm = (intialInputs,initialFormValidity) => {\n//     const [formState, dispatch] = useReducer(formReducer, {\n//         inputs: intialInputs,\n//         isValid: initialFormValidity,\n//       });\n\n\n//       const inputHandler = useCallback((id, value, isValid) => {\n//         dispatch({\n//           type: \"INPUT_CHANGE\",\n//           value: value,\n//           isValid: isValid,\n//           inputId: id\n//         });\n//       }, []);\n\n//       const setFormdata = useCallback((inputData, formValidity) => {\n//         dispatch({\n//           type: \"SET_DATA\",\n//           inputs: inputData,\n//           formIsValid: formValidity\n//         })\n//       }, []);\n\n//       return [formState, inputHandler, setFormdata]\n// };;\n\nimport { useCallback, useReducer } from \"react\";\n\n\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n  "],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAI/C,OAAO,MAAMC,OAAO,GAAGA,CAACC,aAAa,EAAEC,mBAAmB,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGN,UAAU,CAACO,WAAW,EAAE;IACpDC,MAAM,EAAEN,aAAa;IACrBO,OAAO,EAAEN;EACX,CAAC,CAAC;EAEF,MAAMO,YAAY,GAAGX,WAAW,CAAC,CAACY,EAAE,EAAEC,KAAK,EAAEH,OAAO,KAAK;IACvDH,QAAQ,CAAC;MACPO,IAAI,EAAE,cAAc;MACpBD,KAAK;MACLH,OAAO;MACPK,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,WAAW,GAAGhB,WAAW,CAAC,CAACiB,SAAS,EAAEC,YAAY,KAAK;IAC3DX,QAAQ,CAAC;MACPO,IAAI,EAAE,UAAU;MAChBL,MAAM,EAAEQ,SAAS;MACjBE,WAAW,EAAED;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACZ,SAAS,EAAEK,YAAY,EAAEK,WAAW,CAAC;AAC/C,CAAC;AAACX,EAAA,CAxBWH,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}