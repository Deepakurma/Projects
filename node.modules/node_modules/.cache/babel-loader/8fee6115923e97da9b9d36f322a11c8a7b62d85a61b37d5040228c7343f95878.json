{"ast":null,"code":"// import { BrowserRouter as Router, Routes, Route,redirect } from \"react-router-dom\";\n// import User from \"./user/components/pages/user\";\n// // import Useritem from \"./user/components/useritem\";\n// // import MainNavigation from \"./shared/components/Navigation /MainNavigation\";\n// import MainNavigation from \"./shared/components/Navigation/MainNavigation\";\n// import UserPlaces from \"./places/components/pages/UserPlaces\";\n// import UpdatePlace from \"./places/components/pages/UpdatePlace\";\n// import Auth from \"./user/components/pages/Auth\";\n// import NewPlace from \"./places/components/pages/NewPlace\";\n// import { AuthContext } from \"./shared/components/Context/auth.context\";\n// import React, { useCallback, useLayoutEffect, useState, useSyncExternalStore } from \"react\";\n\n// const App = () => {\n//   const [isLogedIn, setisLogedIn] = useState(false);\n//   const login = useCallback(() => {\n//     setisLogedIn(true);\n//   },[]);\n//   const logout = useCallback(() => {\n//     setisLogedIn(false);\n//   },[]);\n\n//  let routes;\n\n//  if(isLogedIn) {\n//   routes = (\n//     <React.Fragment>\n//       <Routes>\n//       <Route path=\"/\" element={<User />} />\n//       <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//       <Route path=\"/places/new\" element={<NewPlace />}></Route>\n//       <Route path=\"/places/:placeId\" element={<UpdatePlace />}></Route>\n//       <redirect to=\"/auth\"/>\n//      </Routes>\n//     </React.Fragment>\n//   ); \n//  }else{\n//   routes = (\n//     <React.Fragment>\n//       <Routes>\n//       <Route path=\"/\" element={<User />} />\n//       <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//       <Route path=\"/auth\" element={<Auth />}></Route>\n//       <redirect to=\"/auth\"/>\n//      </Routes>\n//     </React.Fragment>\n//   );\n//  }\n\n//   return (\n//     <AuthContext.Provider value={{isLogedIn: isLogedIn, login: login, logout: logout}}>\n//       <Router>\n//         <MainNavigation />\n//         <main>\n//           {/* <Routes>\n//             <Route path=\"/\" element={<User />} />\n//             <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//             <Route path=\"/places/new\" element={<NewPlace />}></Route>\n//             <Route path=\"/places/:placeId\" element={<UpdatePlace />}></Route>\n//             <Route path=\"/auth\" element={<Auth />}></Route>\n//           </Routes> */}\n//           {routes}\n//         </main>\n//       </Router>\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/deepakkurma/Desktop/React-mern-stack/src/App.js"],"sourcesContent":["// import { BrowserRouter as Router, Routes, Route,redirect } from \"react-router-dom\";\n// import User from \"./user/components/pages/user\";\n// // import Useritem from \"./user/components/useritem\";\n// // import MainNavigation from \"./shared/components/Navigation /MainNavigation\";\n// import MainNavigation from \"./shared/components/Navigation/MainNavigation\";\n// import UserPlaces from \"./places/components/pages/UserPlaces\";\n// import UpdatePlace from \"./places/components/pages/UpdatePlace\";\n// import Auth from \"./user/components/pages/Auth\";\n// import NewPlace from \"./places/components/pages/NewPlace\";\n// import { AuthContext } from \"./shared/components/Context/auth.context\";\n// import React, { useCallback, useLayoutEffect, useState, useSyncExternalStore } from \"react\";\n\n// const App = () => {\n//   const [isLogedIn, setisLogedIn] = useState(false);\n//   const login = useCallback(() => {\n//     setisLogedIn(true);\n//   },[]);\n//   const logout = useCallback(() => {\n//     setisLogedIn(false);\n//   },[]);\n\n//  let routes;\n\n//  if(isLogedIn) {\n//   routes = (\n//     <React.Fragment>\n//       <Routes>\n//       <Route path=\"/\" element={<User />} />\n//       <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//       <Route path=\"/places/new\" element={<NewPlace />}></Route>\n//       <Route path=\"/places/:placeId\" element={<UpdatePlace />}></Route>\n//       <redirect to=\"/auth\"/>\n//      </Routes>\n//     </React.Fragment>\n//   ); \n//  }else{\n//   routes = (\n//     <React.Fragment>\n//       <Routes>\n//       <Route path=\"/\" element={<User />} />\n//       <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//       <Route path=\"/auth\" element={<Auth />}></Route>\n//       <redirect to=\"/auth\"/>\n//      </Routes>\n//     </React.Fragment>\n//   );\n//  }\n\n//   return (\n//     <AuthContext.Provider value={{isLogedIn: isLogedIn, login: login, logout: logout}}>\n//       <Router>\n//         <MainNavigation />\n//         <main>\n//           {/* <Routes>\n//             <Route path=\"/\" element={<User />} />\n//             <Route path=\"/:userId/places\" element={<UserPlaces />}></Route>\n//             <Route path=\"/places/new\" element={<NewPlace />}></Route>\n//             <Route path=\"/places/:placeId\" element={<UpdatePlace />}></Route>\n//             <Route path=\"/auth\" element={<Auth />}></Route>\n//           </Routes> */}\n//           {routes}\n//         </main>\n//       </Router>\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default App;\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}